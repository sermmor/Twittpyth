#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sat Feb 19 13:53:22 2011

import wx
import datetime

# begin wxGlade: extracode
# end wxGlade



class OpcionesTwittpyth(wx.ScrolledWindow):
    def __init__(self, *args, **kwds):
        # begin wxGlade: OpcionesTwittpyth.__init__
        #kwds["style"] = wx.DEFAULT_FRAME_STYLE
        #wx.Frame.__init__(self, *args, **kwds)
        wx.ScrolledWindow.__init__(self, *args, **kwds)
        
        self.PATH_APP = ''
        
        #Variables
        fich1 = open(self.PATH_APP + "listaPerfiles", "Ur")
        listaLosQueSigo = map(lambda lineaa: lineaa.replace("\n",""), fich1.readlines())
        fich1.close()
        
        self.nomFicheroListaNoVer = self.PATH_APP + "listaNoVer" #Por si ocurre algún error en lo siguiente le pongo este nombre.
        fechaHoy = str(datetime.date.today()).split("-") #[anyo, mes, dia]
        if datetime.date(int(fechaHoy[0]), int(fechaHoy[1]), int(fechaHoy[2])).isoweekday() < 6:
            #1==lunes, 2==martes,..., 5==viernes
            self.nomFicheroListaNoVer = self.PATH_APP + "SUPERFILTRO_listaNoVer"
        else: 
            #6==sabado y 7==domingo
            self.nomFicheroListaNoVer = self.PATH_APP + "FINDESEMANA_listaNoVer"
        
        fich1 = open(self.nomFicheroListaNoVer, "Ur")
        listaLosQueNoLeo = map(lambda lineaa: lineaa.replace("\n",""), fich1.readlines())
        fich1.close()
        fich1 = open("listaExcepcionEliminar", "Ur")
        listaExcepciones = map(lambda lineaa: lineaa.replace("\n",""), fich1.readlines())
        fich1.close()
        
        self.label_1 = wx.StaticText(self, -1, " Lista pefiles: ")
        self.lBPerfiles = wx.ListBox(self, -1, choices=listaLosQueSigo)
        self.lBPerfiles.Select(0)
        self.label_4 = wx.StaticText(self, -1, u"Añade")
        self.tcPerfiles = wx.TextCtrl(self, -1, "")
        self.btAnyadirPerfiles = wx.Button(self, -1, u"Añadir")
        self.btEliminarPerfiles = wx.Button(self, -1, "Eliminar")
        self.label_2 = wx.StaticText(self, -1, " Lista no ver: ")
        self.lBNoVer = wx.ListBox(self, -1, choices=listaLosQueNoLeo)
        self.lBNoVer.Select(0)
        self.label_5 = wx.StaticText(self, -1, u"Añade")
        self.tcNoVer = wx.TextCtrl(self, -1, "")
        self.btAnyadirNoVer = wx.Button(self, -1, u"Añadir")
        self.btEliminarNoVer = wx.Button(self, -1, "Eliminar")
        self.label_3 = wx.StaticText(self, -1, " Lista excepciones\n de a eliminar: ")
        self.lbExpAEliminar = wx.ListBox(self, -1, choices=listaExcepciones)
        self.lbExpAEliminar.Select(0)
        self.label_6 = wx.StaticText(self, -1, u"Añade")
        self.tcExpAEliminar = wx.TextCtrl(self, -1, "")
        self.btAnyadirExpAEliminar = wx.Button(self, -1, u"Añadir")
        self.btEliminarExpAEliminar = wx.Button(self, -1, "Eliminar")

        self.__set_properties()
        self.__do_layout()
        
        funcionesAnyadir=[lambda evento: self.anyadirALista(self.lBPerfiles, self.tcPerfiles, self.PATH_APP + "listaPerfiles"),
                          lambda evento: self.anyadirALista(self.lBNoVer, self.tcNoVer, self.nomFicheroListaNoVer),
                          lambda evento: self.anyadirALista(self.lbExpAEliminar, self.tcExpAEliminar, self.PATH_APP + "listaExcepcionEliminar")]
        
        funcionesEliminar=[lambda evento: self.borrarDeLista(self.lBPerfiles, self.PATH_APP + "listaPerfiles"),
                           lambda evento: self.borrarDeLista(self.lBNoVer, self.nomFicheroListaNoVer),
                           lambda evento: self.borrarDeLista(self.lbExpAEliminar, self.PATH_APP + "listaExcepcionEliminar")]
        
        self.btAnyadirPerfiles.Bind(wx.EVT_BUTTON, funcionesAnyadir[0])
        self.btAnyadirNoVer.Bind(wx.EVT_BUTTON, funcionesAnyadir[1])
        self.btAnyadirExpAEliminar.Bind(wx.EVT_BUTTON, funcionesAnyadir[2])
        
        self.btEliminarPerfiles.Bind(wx.EVT_BUTTON, funcionesEliminar[0])
        self.btEliminarNoVer.Bind(wx.EVT_BUTTON, funcionesEliminar[1])
        self.btEliminarExpAEliminar.Bind(wx.EVT_BUTTON, funcionesEliminar[2])
        # end wxGlade
        
    def anyadirALista(self, objetoLista, objetoTextCtrl, nombreFichero):
        if objetoTextCtrl.GetValue()!="":
            objetoLista.Append(objetoTextCtrl.GetValue())
            
            lineasAGuardar = objetoLista.GetItems()
            fich = open(nombreFichero, 'w')
            fich.writelines(map(lambda linea: linea+"\n", lineasAGuardar))
            fich.close()
            
            objetoTextCtrl.Clear()
        
    def borrarDeLista(self, objetoLista, nombreFichero):
        objetoLista.Delete(objetoLista.GetSelection())
        lineasAGuardar = objetoLista.GetItems()
        fich = open(nombreFichero, 'w')
        fich.writelines(map(lambda linea: linea+"\n", lineasAGuardar))
        fich.close()

    def __set_properties(self):
        # begin wxGlade: OpcionesTwittpyth.__set_properties
        #self.SetTitle("Opciones")
        medidaListsBox=(204, 153) #Antes(154, 103)
        self.lBPerfiles.SetMinSize(medidaListsBox)
        self.tcPerfiles.SetMinSize((110, 27))
        self.lBNoVer.SetMinSize(medidaListsBox)
        self.tcNoVer.SetMinSize((110, 27))
        self.lbExpAEliminar.SetMinSize(medidaListsBox)
        self.tcExpAEliminar.SetMinSize((110, 27))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: OpcionesTwittpyth.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(3, 3, 0, 0)
        grid_sizer_2 = wx.FlexGridSizer(2, 3, 0, 0)
        grid_sizer_2_copy = wx.FlexGridSizer(2, 3, 0, 0)
        grid_sizer_2_copy_1 = wx.FlexGridSizer(2, 3, 0, 0)
        grid_sizer_1.Add(self.label_1, 0, 0, 0)
        grid_sizer_1.Add(self.lBPerfiles, 0, 0, 0)
        grid_sizer_2_copy_1.Add(self.label_4, 0, 0, 0)
        grid_sizer_2_copy_1.Add(self.tcPerfiles, 0, 0, 0)
        grid_sizer_2_copy_1.Add(self.btAnyadirPerfiles, 0, 0, 0)
        grid_sizer_2_copy_1.Add(self.btEliminarPerfiles, 0, 0, 0)
        grid_sizer_2_copy_1.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_2_copy_1.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_1.Add(grid_sizer_2_copy_1, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_2, 0, 0, 0)
        grid_sizer_1.Add(self.lBNoVer, 0, 0, 0)
        grid_sizer_2_copy.Add(self.label_5, 0, 0, 0)
        grid_sizer_2_copy.Add(self.tcNoVer, 0, 0, 0)
        grid_sizer_2_copy.Add(self.btAnyadirNoVer, 0, 0, 0)
        grid_sizer_2_copy.Add(self.btEliminarNoVer, 0, 0, 0)
        grid_sizer_2_copy.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_2_copy.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_1.Add(grid_sizer_2_copy, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_3, 0, 0, 0)
        grid_sizer_1.Add(self.lbExpAEliminar, 0, 0, 0)
        grid_sizer_2.Add(self.label_6, 0, 0, 0)
        grid_sizer_2.Add(self.tcExpAEliminar, 0, 0, 0)
        grid_sizer_2.Add(self.btAnyadirExpAEliminar, 0, 0, 0)
        grid_sizer_2.Add(self.btEliminarExpAEliminar, 0, 0, 0)
        grid_sizer_2.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_2.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class OpcionesTwittpyth


#class MyApp(wx.App):
#    def OnInit(self):
#        wx.InitAllImageHandlers()
#        Opciones = OpcionesTwittpyth(None, -1, "")
#        self.SetTopWindow(Opciones)
#        Opciones.Show()
#        return 1

# end of class MyApp

#if __name__ == "__main__":
#    app = MyApp(0)
#    app.MainLoop()
