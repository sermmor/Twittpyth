#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Feb  8 13:22:07 2011

import wx
import wx.lib.agw.customtreectrl
from wx.lib.agw import ultimatelistctrl as ULC
import sys
from modelos import Timeline
import modelos
import datetime

# begin wxGlade: extracode
# end wxGlade



class VentanaPrincipal(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: VentanaPrincipal.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        #Constantes
        self.PATH_APP = ''
        self.LIMITE_DE_TUITS = 50
        self.LIMITE_FLUJOS = 50
        self.MILISEGUNDOS_PARA_ACTUALIZAR = 30000 #milisegundos de espera para actualizar TL.
        self.COLOR_NO_LEIDO = wx.Colour(255, 225, 255)#(Rojo, Verde, Azul)
        self.COLOR_LEIDO = wx.Colour(225, 255, 255)#(Rojo, Verde, Azul)
        
        #Lee ficheros de listas y inicializa variables.
        nomFicheroListaNoVer = self.PATH_APP + "listaNoVer" #Por si ocurre algún error en lo siguiente le pongo este nombre.
        self.nomFicheroListaNoVerUsado = ""
        fechaHoy = str(datetime.date.today()).split("-") #[anyo, mes, dia]
        if datetime.date(int(fechaHoy[0]), int(fechaHoy[1]), int(fechaHoy[2])).isoweekday() < 6:
            #1==lunes, 2==martes,..., 5==viernes
            nomFicheroListaNoVer = self.PATH_APP + "SUPERFILTRO_listaNoVer"
            self.nomFicheroListaNoVerUsado = "Superfiltro en uso"
        else: 
            #6==sabado y 7==domingo
            nomFicheroListaNoVer = self.PATH_APP + "FINDESEMANA_listaNoVer"
            self.nomFicheroListaNoVerUsado = "Filtro fin de semana en uso"
        fich1 = open(self.PATH_APP + "listaPerfiles", "Ur")
        self.listaLosQueSigo = map(lambda lineaa: lineaa.replace("\n",""), fich1.readlines())
        fich1.close()
        fich1 = open(nomFicheroListaNoVer, "Ur")
        self.listaLosQueNoLeo = map(lambda lineaa: lineaa.replace("\n",""), fich1.readlines())
        fich1.close()
        
        # Tool Bar
        self.vp_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_TEXT)
        self.SetToolBar(self.vp_toolbar)
        #self.toolbarRT=wx.NewId()
        #self.toolbarReplies=wx.NewId()
        #self.toolbarFavorito=wx.NewId()
        self.toolbarPerdidos = wx.NewId()
        self.toolbarImagen=wx.NewId()
        self.toolbarOrtografia=wx.NewId()
        self.toolbarRecargar=wx.NewId()
        self.toolbarTumblr=wx.NewId()
        self.toolbarTrendingTopics=wx.NewId()
        #self.vp_toolbar.AddLabelTool(self.toolbarRT, "RT",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "RT", "RT")
        #self.vp_toolbar.AddLabelTool(self.toolbarReplies, "@",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "@", "@")
        #self.vp_toolbar.AddLabelTool(self.toolbarFavorito, "Favorito",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "Favorito", "Favorito")
        self.vp_toolbar.AddLabelTool(self.toolbarPerdidos, "Perdidos",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "Perdidos", "Perdidos")
        self.vp_toolbar.AddLabelTool(self.toolbarImagen, "Imagen",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "Imagen", "Imagen")
        self.vp_toolbar.AddLabelTool(self.toolbarOrtografia, "Ortografía",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "Ortografía", "Ortografía")
        self.vp_toolbar.AddLabelTool(self.toolbarRecargar, "Recargar",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "Recargar", "Recargar")
        self.vp_toolbar.AddLabelTool(self.toolbarTumblr, "Tumblr",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "Tumblr", "Tumblr")
        self.vp_toolbar.AddLabelTool(self.toolbarTrendingTopics, "TT",  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")),  wx.ArtProvider.GetBitmap(eval("wx.ART_EXECUTABLE_FILE")), wx.ITEM_NORMAL, "TT", "TT")
        # Tool Bar end
        # Declaro Árbol
        self.treeCtrlIrAZona = wx.lib.agw.customtreectrl.CustomTreeCtrl(self, -1, style=wx.TR_HIDE_ROOT|wx.TR_TWIST_BUTTONS|wx.TR_HAS_BUTTONS)
        arbolRaiz = self.treeCtrlIrAZona.AddRoot("Mapa web")
        arbolHome = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "Home")
        arbolReplies = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "@")
        arbolPerfil = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "Perfil")
        arbolDM = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "DM")
        arbolFavoritos = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "Favoritos")
        arbolRetweets = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "Retweets")
        self.treeCtrlIrAZona.AppendItem(arbolRetweets, "De otros")
        self.treeCtrlIrAZona.AppendItem(arbolRetweets, "Mios")
        self.treeCtrlIrAZona.AppendItem(arbolRetweets, "Mis tweets")
        arbolAtajoAPerfiles = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "Perfiles")
        for elem in self.listaLosQueSigo:
            self.treeCtrlIrAZona.AppendItem(arbolAtajoAPerfiles, elem)
        arbolQuienMeHaEliminado = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "A eliminar")
        arbolOpciones = self.treeCtrlIrAZona.AppendItem(arbolRaiz, "Opciones")
        #Fin declaración Árbol
        
        #Inicio declaración lista de tweets
        self.listCtrlListaTweets = ULC.UltimateListCtrl(self, -1, agwStyle=ULC.ULC_REPORT|ULC.ULC_HAS_VARIABLE_ROW_HEIGHT|ULC.ULC_SEND_LEFTCLICK)
        #self.listCtrlListaTweets = wx.ListCtrl(self, -1, style=ULC.ULC_REPORT|ULC.ULC_SINGLE_SEL|ULC.ULC_HAS_VARIABLE_ROW_HEIGHT|ULC.ULC_SEND_LEFTCLICK)
        self.listCtrlListaTweets.InsertColumn(0, "", width=50)
        self.listCtrlListaTweets.InsertColumn(1, "", width=307)
        #Me pillo mi timeline
        self.miTimeline = Timeline(self.LIMITE_DE_TUITS)#(200)
        self.cronologia = self.filtraTweets(self.miTimeline.listaTuplasRutaImagenNickEstadoID(), self.listaLosQueNoLeo, True)
        #Guardamos las imágenes (tamaño=(48x48)) en una lista de imagenes, para luego exportarlas 
        #al UltimateListCtrl.
        self.listaDeImagenesTL=wx.ImageList(48,48,True)
        aux=0
        for imag in self.cronologia:
            aux=self.listaDeImagenesTL.Add(wx.Bitmap(imag[0],wx.BITMAP_TYPE_ANY))
        #Asignar lista de imagenes.
        self.listCtrlListaTweets.SetImageList(self.listaDeImagenesTL, wx.IMAGE_LIST_SMALL)
        #Preparar dc para lo de la separación en líneas.
        f = self.GetFont()
        self.miDc = wx.WindowDC(self)
        self.miDc.SetFont(f)
        indice=0
        #self.ultimoIndice = 0 #DEPURAR
        for i in self.cronologia:
            #Añadir @ y texto
            index = self.listCtrlListaTweets.InsertStringItem(sys.maxint, "")
            self.listCtrlListaTweets.SetStringItem(index, 1, i[1])
            #Inicio colocar @nick en negrita
            #elElemento=self.listCtrlListaTweets.GetItem(index)
            #font = elElemento.GetFont()
            #font.SetWeight(wx.FONTWEIGHT_BOLD)
            #font.SetPointSize(8)
            #elElemento.SetFont(font)
            #self.listCtrlListaTweets.SetItem(elElemento)
            #Fin colocar @nick en negrita
            #Inicio cambiar color del fondo.
            self.listCtrlListaTweets.SetItemBackgroundColour(index, self.COLOR_NO_LEIDO)
            #Fin cambiar color del fondo.
            #Añadir imagen y status
            img = indice%(aux+1)
            index = self.listCtrlListaTweets.InsertImageItem(sys.maxint, img)
            self.listCtrlListaTweets.SetStringItem(index, 1, self.separaEnLineasDe22emes(i[2].replace("\n"," ").replace("&lt;","<").replace("&gt;",">"), self.miDc))
            #Inicio cambiar color del fondo.
            self.listCtrlListaTweets.SetItemBackgroundColour(index, self.COLOR_NO_LEIDO)
            #Fin cambiar color del fondo.
            indice = indice+1
        #Fin declaración lista de tweets
        
        self.tCtrlEscribir = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_MULTILINE|wx.TE_AUTO_URL|wx.TE_RICH2)#|wx.HSCROLL)
        self.btDM = wx.Button(self, -1, "DM")
        self.btTweet = wx.Button(self, -1, "Tweet")
        self.espacioslbLetrasQueQuedan = " "*59
        self.lbLetrasQueQuedan = wx.StaticText(self, -1, "140 - "+self.nomFicheroListaNoVerUsado)#+self.espacioslbLetrasQueQuedan)
        self.contLetrasQueQuedan  = 140
        
        #self.tCtrlInfoTweet = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_MULTILINE|wx.TE_READONLY|wx.HSCROLL|wx.TE_AUTO_URL)
        #co = modelos.Comunes()
        #self.listaSeguidores = co.extraerListaSeguidores("")
        #print "SEGUIDORES"
        #print self.listaSeguidores 
        #self.listaLosQueSigo = co.extraerListaLosQueSigo("")
        #print "SEGUIDOS POR MI"
        #print self.listaLosQueSigo
        
        self.__set_properties()
        self.__do_layout()
        # end wxGlade
    
    def filtraTweets(self, listaTuits, listaNicksElimina, esCronologia):
        '''
        Elimina de la lista de tuits (estilo self.cronologia), los tuits de la gente con los 
        @nicks de listaNicksElimina.
        '''
        def funcionFiltroCronologia(tuitElem):#Para cronologia
            return listaNicksElimina.count(tuitElem[1].split("(")[0])<1
        
        def funcionFiltroPerdidos(tuitElem):#Para perdidos
            return listaNicksElimina.count("@"+tuitElem.getMensaje().user.screen_name)<1
        
        #res = []
        #for tuit in listaTuits:
        #    if listaNicksElimina.count(tuit[1].split("(")[0])<1:
        #        res = res + [tuit]
        #return res
        return filter(funcionFiltroCronologia, listaTuits) if esCronologia else filter(funcionFiltroPerdidos, listaTuits)
    
    def separaEnLineasDe22emes(self, cadenaAFragmentar, dc):
        '''
        Fragmenta en líneas de 286 pixeles (width).
        '''
        #Para entender esto:
        #VER http://stackoverflow.com/questions/2455255/how-to-get-the-width-of-a-string-in-pixels
        #Y VER http://www.wxpython.org/docs/api/wx.DC-class.html#GetTextExtent
        res = ""
        width, height = dc.GetTextExtent(cadenaAFragmentar)
        if width>286:
            temporal = ""
            fragmentos = cadenaAFragmentar.split()
            for cad in fragmentos:
                temporal2 = temporal + " " + cad
                width, height = dc.GetTextExtent(" "+temporal2)
                if width>286:
                    res = res + " " + temporal+"\n"
                    temporal = cad
                else:
                    temporal = temporal2
            res = res + " " + temporal
        else:
            res = cadenaAFragmentar
        return res
    
    def __set_properties(self):
        # begin wxGlade: VentanaPrincipal.__set_properties
        self.SetTitle("Twittpyth - " + self.nomFicheroListaNoVerUsado)
        self.vp_toolbar.Realize()
        self.treeCtrlIrAZona.SetMinSize((150, 420))
        self.listCtrlListaTweets.SetMinSize((369, 375))
        self.tCtrlEscribir.SetMinSize((369, 75))
        #self.tCtrlInfoTweet.SetMinSize((254, 75))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: VentanaPrincipal.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        #grid_sizer_1 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_2 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_4 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_5 = wx.FlexGridSizer(1, 3, 0, 0)
        grid_sizer_2.Add(self.treeCtrlIrAZona, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.listCtrlListaTweets, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.tCtrlEscribir, 0, 0, 0)
        grid_sizer_5.Add(self.lbLetrasQueQuedan, 4, 0, 1)
        grid_sizer_5.Add(self.btDM, 0, 0, 0)
        grid_sizer_5.Add(self.btTweet, 0, 0, 0)
        grid_sizer_4.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_2.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        #grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        #grid_sizer_1.Add(self.tCtrlInfoTweet, 0, wx.EXPAND, 0)
        sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)#sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class VentanaPrincipal


class MyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = VentanaPrincipal(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
